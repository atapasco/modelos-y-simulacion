# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\juan-\Downloads\GUI Proyecto twitter.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import random
import sys
import io
from PyQt5 import uic
from PyQt5.QtWidgets import QMainWindow, QApplication
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import folium
from folium.plugins import MiniMap
from PyQt5.QtWebEngineWidgets import QWebEngineView

from Tweepy import Twitts

tweets = Twitts()

TextTwitts = []
Twittsverificados = 15


class Gui(QMainWindow):
    validar = 0
    def __init__(self):
        super().__init__()
        uic.loadUi("GUI Proyecto twitter.ui", self)
        self.grafica = Canvas_grafica()
        self.grafica1 = Canvas_grafica2()
        self.pushButton.clicked.connect(self.activar)

    def activar(self):
        
        tweets.twittsPorSemana(self.lineEdit.text()).clear()
                
        self.listWidget.clear()
        self.listWidget.insertItems(1,tweets.twittsPorSemana(self.lineEdit.text()))
        self.label_13.setText(str(tweets.twittsTotales()))
        
        self.label_10.setText('23')
        self.label_11.setText('27')
        self.label_12.setText(str(Twittsverificados))
        self.verticalLayout_5.addWidget(self.grafica1)
        self.verticalLayout_4.addWidget(self.grafica)
        coordinate = (10.45, -73.25)
        m = folium.Map(tiles='Stamen Terrain',zoom_start=13,location=coordinate)

        data = io.BytesIO()
        m.save(data, close_file=False)

        webView = QWebEngineView()
        webView.setHtml(data.getvalue().decode())
        if self.validar == 0:
            self.verticalLayout_2.addWidget(webView,0)
            self.validar = 1
                        



class Canvas_grafica(FigureCanvas):
    def __init__(self, parent=None):     
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(2, 2), 
            sharey=True, facecolor='white')
        super().__init__(self.fig) 

        nombres = ['lun', 'mar', 'mie', 'jue','vie','sab','dom']
        colores = ['red','red','red','red', 'red', 'red', 'red']
        tamaño = [2334, 9900, 4323, 12000, 1000, 3890 ,4990]

        self.ax.bar(nombres, tamaño, color = colores)
        self.fig.suptitle('Grafica de Barras',size=11)

class Canvas_grafica2(FigureCanvas):
    def __init__(self, parent=None):     
        self.fig , self.ax = plt.subplots(1,dpi=100, figsize=(2, 2), 
            sharey=True, facecolor='white')
        super().__init__(self.fig) 


        nombres = ['positivos', 'negativos']
        colores = ['green','red']
        tamaño = [23, 27]
        explotar = [0.05, 0.05] 

        plt.title("grafica de torta",
            color='black',size=9, family="Arial")

        self.ax.pie(tamaño, explode = explotar, labels = nombres, 
            colors = colores,
                autopct = '%1.0f%%', pctdistance = 0.6,
                shadow=True, startangle=50, radius = 0.8, 
                labeldistance=1.1)  
        self.ax.axis('equal')

class Canvas_grafica(FigureCanvas):
    def __init__(self, parent=None):     
        self.fig , self.ax = plt.subplots(1, dpi=100, figsize=(2, 2), 
            sharey=True, facecolor='white')
        super().__init__(self.fig) 

        nombres = ['lun', 'mar', 'mie', 'jue','vie','sab','dom']
        colores = ['red','red','red','red', 'red', 'red', 'red']
        tamaño = [2334, 9900, 4323, 12000, 1000, 3890 ,4990]

        self.ax.bar(nombres, tamaño, color = colores)
        self.fig.suptitle('Grafica de Barras',size=11)

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    GUI = Gui()
    GUI.show()
    sys.exit(app.exec_())



